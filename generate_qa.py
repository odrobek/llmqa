from llmqa import ROSIELlama, QAGenerator, CritiqueAgent
import argparse
from pathlib import Path
import os

def parse_args():
    parser = argparse.ArgumentParser(description="Generate QA pairs from text chunks")
    parser.add_argument('--input_file', type=str, required=True,
                      help="Path to input CSV file with text chunks")
    parser.add_argument('--output_file', type=str, required=True,
                      help="Path to output JSON file for QA pairs")
    parser.add_argument('--chunk_column', type=str, default='processed_text',
                      help="Name of the column containing text chunks")
    parser.add_argument('--verbose', type=bool, default=True,
                      help="Whether to print progress messages")
    parser.add_argument('--num_workers', type=int, default=None,
                      help="Number of worker processes")
    parser.add_argument('--batch_size', type=int, default=10,
                      help="Number of chunks to process in parallel")
    return parser.parse_args()

def main():
    args = parse_args()
    
    # Validate input file
    input_path = Path(args.input_file)
    if not input_path.exists():
        raise FileNotFoundError(f"Input file not found: {args.input_file}")
    
    # Initialize model and generator
    print("Initializing ROSIE LLaMA model...")
    model = ROSIELlama()
    critique_model = ROSIELlama("You are a critique agent that does everything asked of you in the prompts given to you. You are evaluating QA pairs generated by a QA model.")
    critique_agent = CritiqueAgent(critique_model)
    generator = QAGenerator(model, critique_agent=critique_agent, min_critique_score=3.5, num_workers=args.num_workers)
    
    # Generate QA pairs
    print(f"\nProcessing chunks from {args.input_file}")
    print(f"Output will be saved to {args.output_file}")
    print(f"Using {generator.num_workers} worker processes")
    print(f"Batch size: {args.batch_size}\n")
    
    generator.generate_from_file(
        args.input_file,
        args.output_file,
        args.chunk_column,
        args.verbose,
        batch_size=args.batch_size
    )
    
    print("\nGeneration complete!")

if __name__ == "__main__":
    main()
